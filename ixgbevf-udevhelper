#!/bin/bash
# The MIT License (MIT)
#
# Copyright (c) 2015-2016 StorPool Storage AD
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

#---------------------------------------------------------------------------
# This file should be placed in /lib/udev/
#
# It is called by two udev rules.
# 1. When ixgbe module is loaded to set the number of VF interfces
# 2. When ixvbevf module is loaded to set VLAN, MAC and VF interface name

set -e

export PATH=/bin:/sbin:/usr/bin:/usr/sbin:$PATH

function splog()
{
	logger -t "[$SEQNUM] ${0##*/}" "[$INTERFACE] $*"
}

function getVirtfnId()
{
	local _DEVPATH="${1%/net/*}"
	local _PCISLOTNAME="${_DEVPATH##*/}"
	local _UEVENT="$(grep -H "PCI_SLOT_NAME=$_PCISLOTNAME" /sys/${_DEVPATH}/physfn/virtfn*/uevent)"
	local _VF="${_UEVENT%/uevent*}"
	echo "${_VF#*virtfn}"
}

function createVFNAME()
{
	VFNAME_TEMPLATE=${VFNAME_TEMPLATE:-_PFNAME__vf_VFID_}
	VFNAME="${VFNAME_TEMPLATE//_PFNAME_/$PFNAME}"
	VFNAME="${VFNAME//_VFID_/$VFID}"
}

if [ -f "/etc/ixgbevf-udevhelper.conf" ]; then
	source "/etc/ixgbevf-udevhelper.conf"
fi

if [ "$DRIVER" = "" ]; then
	DRIVER="$(readlink /sys/$DEVPATH/device/driver || true)"
	DRIVER="${DRIVER##*/}"
fi

if [ -n "$DEBUG" ]; then
	splog "DRIVER=$DRIVER DEVPATH=$DEVPATH"
fi

case "$ACTION" in
	add)
		if [ "$DRIVER" = "ixgbe" ]; then
			OIFS=$IFS
			IFS=","
			PCI_ARRAY=(${PCI_SLOT_LIST//,/ })
			PCI_NUMVFS=(${PCI_NUMVFS_LIST//,/ })
			IFS=$OIFS
			for i in ${!PCI_ARRAY[@]}; do
				NUMVFS="${PCI_NUMVFS[i]}"
				if [ -n "$DEBUG" ]; then
					splog "$i $PCI_SLOT_NAME PCI_SLOT ${PCI_ARRAY[i]} NUMVFS $NUMVFS"
				fi
				if [ "${PCI_ARRAY[i]}" != "$PCI_SLOT_NAME" ]; then
					continue
				fi
				if [ -n "$NUMVFS" ] && [ "${NUMVFS//[[:digit:]]/}" = ""  ] ; then
					splog "enabling $NUMVFS VF on PCI slot $PCI_SLOT_NAME"
					echo "$NUMVFS" >"/sys/module/ixgbe/drivers/pci:ixgbe/$PCI_SLOT_NAME/sriov_numvfs"
				else
					splog "no PCI_NUMVFS set for $PCI_SLOT_NAME"
				fi
			done
		elif [ "$DRIVER" = "ixgbevf" ]; then
			PFNAME="$(ls /sys/${DEVPATH}/../../physfn/net)"
			VFID=`getVirtfnId $DEVPATH`
			createVFNAME
			eval "VFVLAN=\${${VFNAME}_VLAN}"
			VFMAC="$(</sys/${DEVPATH}/address)"
			# validate vlan_id
			if [ -n "$VFVLAN" ] && [ "${VFVLAN//[[:digit:]]/}" != ""  ] ; then
				splog "Warning! VFVLAN=$VFVLAN for $VFNAME looks like not VLAN_ID! Skipped vlan setup."
				VFVLAN=
			fi
			if [ -n "$DEBUG" ]; then
				splog "PFNAME=$PFNAME VFNAME=$VFNAME${VFVLAN:+ VFVLAN=$VFVLAN}"
			fi
			# set VLAN and MAC filtering for the VF
			ip link set "$PFNAME" vf "$VFID" mac ${VFMAC}${VFVLAN:+ vlan $VFVLAN} &>/dev/null
			splog "ip link set $PFNAME vf $VFID mac ${VFMAC}${VFVLAN:+ vlan $VFVLAN} (ret:$?)"
			# return the new VF interface name
			echo "$VFNAME"
		fi
	;;
esac
