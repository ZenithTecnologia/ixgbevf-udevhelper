#!/bin/bash
# The MIT License (MIT)
#
# Copyright (c) 2015-2017 StorPool Storage AD
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

#---------------------------------------------------------------------------
# This file should be placed in /lib/udev/
#
# It is called by two udev rules.
# 1. When ixgbe module is loaded to set the number of VF interfces
# 2. When ixvbevf module is loaded to set VLAN, MAC and VF interface name

set -e

export PATH=/bin:/sbin:/usr/bin:/usr/sbin:$PATH

NUMVFS_DELAY_WRITE="${NUMVFS_DELAY_WRITE:-1}"
NUMVFS_WAIT="${NUMVFS_WAIT:-30}"

RENAME_VF_INTERFACE="yes"
VF_UP_BEFORE_MTU="yes"
HARDWARE_FILTERING="yes"

function splog()
{
	logger -t "[$SEQNUM] ${0##*/}" "[$DRIVER:$INTERFACE] $*"
}

function getPciSlot()
{
	#local _DEVPATH="${1%/net/*}"
	local _RET="$(readlink "/sys/$1/../../physfn")"
	echo "${_RET##*/}"
}

function getVirtfnId()
{
	local _DEVPATH="${1%/net/*}"
	local _PCISLOTNAME="${_DEVPATH##*/}"
	local _UEVENT="$(grep -H "PCI_SLOT_NAME=$_PCISLOTNAME" /sys/${_DEVPATH}/physfn/virtfn*/uevent)"
	local _VF="${_UEVENT%/uevent*}"
	echo "${_VF#*virtfn}"
}

function createVFNAME()
{
	VFNAME="${VFNAME_TEMPLATE:-_PFNAME__vf_VFID_}"
	if [ -n "$pci_vf_TEMPLATE" ] && [ "$pci_vf_TEMPLATE" != "-" ]; then
		VFNAME="$pci_vf_TEMPLATE"
	fi
	VFNAME="${VFNAME//_PFNAME_/$PFNAME}"
	if [ -n "$pci_vf_VLAN" ]; then
		VFNAME="${VFNAME//_VFVLAN_/$pci_vf_VLAN}"
	fi
	VFNAME="${VFNAME//_VFID_/$VFID}"
}

if [ -f "/etc/ixgbevf-udevhelper.conf" ]; then
	source "/etc/ixgbevf-udevhelper.conf"
fi

if [ "$DRIVER" = "" ]; then
	DRIVER="$(readlink /sys/$DEVPATH/device/driver || true)"
	DRIVER="${DRIVER##*/}"
fi

if [ -n "$DEBUG" ]; then
	splog "DEVPATH=$DEVPATH"
fi

case "$ACTION" in
	add)
		if [ "$DRIVER" = "ixgbe" ] || [ "$DRIVER" = "i40e" ]; then
			PCI_ARRAY=(${PCI_SLOT_LIST//,/ })
			PCI_NUMVFS=(${PCI_NUMVFS_LIST//,/ })
			if [ "$PCI_SLOT_NAME" = "" ]; then
				PCI_SLOT_NAME=${DEVPATH%/net*}
				PCI_SLOT_NAME=${PCI_SLOT_NAME##*/}
			fi
			for idx in ${!PCI_ARRAY[@]}; do
				NUMVFS="${PCI_NUMVFS[idx]:-0}"
				PFNAME="${DEVPATH##*/}"
				if [ -n "$DEBUG" ]; then
					splog "$idx $PCI_SLOT_NAME PCI_SLOT ${PCI_ARRAY[i]} NUMVFS $NUMVFS"
				fi
				if [ "${PCI_ARRAY[idx]}" != "$PCI_SLOT_NAME" ]; then
					continue
				fi
				if [ -n "$NUMVFS" ] && [ "${NUMVFS//[[:digit:]]/}" = ""  ] && [ $NUMVFS -gt 0 ] ; then
					retry="${NUMVFS_WAIT:-10}"
					while [ $retry -gt 0 ]; do
						if [ -f "/sys/module/${DRIVER}/drivers/pci:${DRIVER}/$PCI_SLOT_NAME/sriov_numvfs" ]; then
							splog "enabling $NUMVFS VF on PCI slot $PCI_SLOT_NAME {$((NUMVFS_WAIT-$retry))}"
							echo "$NUMVFS" >"/sys/module/${DRIVER}/drivers/pci:${DRIVER}/$PCI_SLOT_NAME/sriov_numvfs"
							break
#						else
#							splog "[try:$retry] /sys/module/${DRIVER}/drivers/pci:${DRIVER}/$PCI_SLOT_NAME/sriov_numvfs not found"
						fi
						retry=$((retry-1))
						sleep 0.1
					done
					if [ -n "$DEBUG" ]; then
						splog "/sys/module/${DRIVER}/drivers/pci:${DRIVER}/$PCI_SLOT_NAME/sriov_numvfs: $(</sys/module/${DRIVER}/drivers/pci:${DRIVER}/$PCI_SLOT_NAME/sriov_numvfs)"
					fi
					VFID=0
					eval "_TMP=\${PCI${idx}_VF_SPOOFCHK_LIST}"
					_TMP=(${_TMP//,/ })
					while [ $VFID -lt $NUMVFS ]; do
						pci_vf_SPOOFCHK="${_TMP[VFID]}"
						splog "PFNAME:$PFNAME VFID:$VFID pci_vf_SPOOFCHK=$pci_vf_SPOOFCHK"
						if [ "$pci_vf_SPOOFCHK" != 'on' ] && [ "$pci_vf_SPOOFCHK" != "off" ]; then
							splog "Warning! $PCI_SLOT_NAME VF=$VFID SPOOFCHK='$pci_vf_SPOOFCHK' must be 'on' or 'off'. Skipping spoof check setup."
						else
							# set VF spoof check
							ip link set dev "$PFNAME" vf "$VFID" spoofchk "$pci_vf_SPOOFCHK" &>/dev/null
							splog "ip link set dev $PFNAME vf $VFID spoofchk $pci_vf_SPOOFCHK (ret:$?)" &>/dev/null
						fi
						((VFID=VFID+1))
					done
				else
					if [ -n "$NUMVFS" ]; then
						splog "Skipped $PCI_SLOT_NAME because NUMVFS not number ($NUMVFS)"
					else
						splog "No PCI_NUMVFS set for $PCI_SLOT_NAME (idx:$idx)"
					fi
				fi
				if [ "$HARDWARE_FILTERING" = "yes" ] && ethtool --version &>/dev/null; then
					ethtool -K "$PFNAME" ntuple on
					splog "ethtool -K $PFNAME ntuple on (ret:$?)" &>/dev/null
				fi
			done
		elif [ "$DRIVER" = "ixgbevf" ] || [ "$DRIVER" = "i40evf" ]; then
			PFNAME="$(ls /sys/${DEVPATH}/../../physfn/net)"
			VFMAC="$(</sys/${DEVPATH}/address)"
			VFID=`getVirtfnId $DEVPATH`

			PCI_NAME=`getPciSlot "$DEVPATH"`
			PCI_ARRAY=(${PCI_SLOT_LIST//,/ })
			PCI_MTU_ARRAY=(${PCI_MTU_LIST//,/ })
			PCI_NO_UP_ARRAY=(${PCI_NO_UP_LIST//,/ })
			for idx in ${!PCI_ARRAY[@]}; do
				if [ "$PCI_NAME" = "${PCI_ARRAY[idx]}" ]; then
					eval "_TMP=\${PCI${idx}_VF_VLAN_LIST}"
					_TMP=(${_TMP//,/ })
					pci_vf_VLAN="${_TMP[VFID]}"
					eval "_TMP=\${PCI${idx}_VF_MTU_LIST}"
					_TMP=(${_TMP//,/ })
					pci_vf_MTU="${_TMP[VFID]}"
					eval "_TMP=\${PCI${idx}_VF_TEMPLATE_LIST}"
					_TMP=(${_TMP//,/ })
					pci_vf_TEMPLATE="${_TMP[VFID]}"
					pci_MTU="${PCI_MTU_ARRAY[idx]}"
					pci_NO_UP="${PCI_NO_UP_ARRAY[idx]}"
					break
				else
					pci_vf_VLAN=
					pci_vf_MTU=
					pci_vf_TEMPLATE=
					pci_MTU=
					pci_NO_UP=
				fi
			done

			if [ -n "$pci_vf_VLAN" ] && [ -n "${pci_vf_VLAN//[[:digit:]]/}" ] ; then
				splog "Warning! $PCI_NAME VF=$VFID VLAN=$pci_vf_VLAN looks like not VLAN_ID! Skipped vlan setup."
				pci_vf_VLAN=
			fi
			if [ -n "$pci_MTU" ] && [ -n "${pci_MTU//[[:digit:]]/}" ] ; then
				splog "Warning! $PCI_NAME MTU=$pci_MTU looks like not MTU! Skipping PHYDEV mtu setup."
				pci_MTU=
			fi
			if [ -n "$pci_vf_MTU" ] && [ -n "${pci_vf_MTU//[[:digit:]]/}"  ] ; then
				splog "Warning! $PCI_NAME VF=$VFID MTU=$pci_vf_MTU looks like not MTU! Skipping mtu setup."
				pci_vf_MTU=
			else
				pci_MTU="${pci_MTU:-$pci_vf_MTU}"
			fi

			createVFNAME

			if [ -n "$DEBUG" ]; then
				splog "PFPCI=$PCI_NAME PFNAME=$PFNAME VFNAME=$VFNAME${pci_vf_VLAN:+ VFVLAN=$pci_vf_VLAN}${pci_MTU:+ PFMTU=$pci_MTU}${pci_vf_MTU:+ VFMTU=$pci_vf_MTU}${pci_NO_UP:+ PCI_NO_UP=$pci_NO_UP}${pci_vf_TEMPLATE:+ VFTEMPLATE=$pci_vf_TEMPLATE}"
			fi

			OLDMTU=`ip link show $PFNAME | head -n 1 | awk '{print $5}'`
			# change PF MTU if differ
			if [ -n "$pci_MTU" ] && [ "$pci_MTU" != "$OLDMTU" ]; then
				ip link set dev "$PFNAME" mtu $pci_MTU &>/dev/null
				splog "ip link set dev $PFNAME mtu $pci_MTU (ret:$?) #OLDMTU:$OLDMTU"
			fi

			# bring PF interface up by default
			if [ "$pci_NO_UP" != "yes"] || [ "$pci_NO_UP" != "1" ]; then
				OLDSTATE=`ip link show "$PFNAME" up | wc -l`
				if [ $OLDSTATE -eq 0 ]; then
					ip link set dev "$PFNAME" up &>/dev/null
					splog "ip link set dev $PFNAME up (ret:$?)"
				elif [ -n "$DEBUG" ]; then
					splog "the interface $PFNAME is already up"
				fi
			fi

			# set MAC filtering for the VF
			ip link set "$PFNAME" vf "$VFID" mac ${VFMAC} &>/dev/null
			splog "ip link set $PFNAME vf $VFID mac ${VFMAC} (ret:$?)"

			if [ -n "$pci_vf_VLAN" ]; then
				# set VLAN filtering for the VF
				ip link set "$PFNAME" vf "$VFID" vlan "$pci_vf_VLAN" &>/dev/null
				splog "ip link set $PFNAME vf $VFID vlan $pci_vf_VLAN (ret:$?)"
			fi

			if [ "$RENAME_VF_INTERFACE" = "yes" ]; then
				if [ "$VFNAME" = "$INTERFACE" ]; then
					if [ -n "$DEBUG" ]; then
						splog "VF interface name same as current ${VFNAME}."
					fi
				else
					ip link set "$INTERFACE" name "${VFNAME}" &>/dev/null
					splog "ip link set $INTERFACE name $VFNAME (ret:$?)"
				fi
				IFNAME="$VFNAME"
			else
				IFNAME="$INTERFACE"
			fi

			if [ -n "$pci_vf_MTU" ]; then
				# first bring the VF interface up
				if [ "$VF_UP_BEFORE_MTU" = "yes" ] || [ "$VF_UP_BEFORE_MTU" = "1" ]; then
					ip link set dev "$IFNAME" up &>/dev/null
					splog "ip link set dev $IFNAME up (ret:$?)"
				fi
				# set MTU for the VF
				ip link set dev "$IFNAME" mtu $pci_vf_MTU &>/dev/null
				splog "ip link set dev $IFNAME mtu $pci_vf_MTU (ret:$?)"
			fi
			# return the new VF interface name
			echo "$VFNAME"
		fi
	;;
esac
